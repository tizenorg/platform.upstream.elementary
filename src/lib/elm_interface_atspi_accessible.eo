mixin Elm_Interface_Atspi_Accessible ()
{
   legacy_prefix: null;
   eo_prefix: elm_interface_atspi_accessible;
   data: Elm_Interface_Atspi_Accessible_Data;
   properties {
      localized_role_name @protected {
         get {
            /*@ Gets an localized string describing ATSPI widget role name. */
         }
         values {
            const(char)* localized_name;
         }
      }
      name @protected {
         get {
            /*@ Gets an string describing ATSPI widget role name. 
                Should be free by a user. */
         }
         set {
         }
         values {
            char* name; /*@ obj name */
         }
      }
      relation_set @protected {
         get {
            /*@ Gets an string describing ATSPI widget role name. Lists and
            elements Should be free by a user. */
         }
         values {
            Elm_Atspi_Relation_Set relations;
         }
      }
      role @protected {
         get {
            /*@ Gets the role of the widget in ATSPI Accessibility domain. */
         }
         set {
         }
         values {
            Elm_Atspi_Role role;
         }
      }
      children @protected {
         get {
            /*@ Gets widget's accessible children. */
         }
         values {
            list *children;
         }
      }
      role_name @protected {
         get {
            /*@ Gets human-readable string indentifying widget accessibility
            role. */
         }
         values {
            const(char)* role_name;
         }
      }
      attributes @protected {
         get {
            /*@ Gets key-value pairs indentifying widget extra 
            attributes. Must be free by a user. */
         }
         values {
            list *attributes;
         }
      }
      index_in_parent @protected {
         get {
            /*@ Gets index of the child in parent's children list. */
         }
         values {
            int idx;
         }
      }
      description @protected {
         get {
            /*@ Gets widget contextual information. */
         }
         set {
            /*@ Sets contextual information about widget. */
         }
         values {
            const(char)* description;
         }
      }
      parent @protected {
         get {
            /*@ Gets widget accessible parent. */
         }
         set {
            /*@ Sets widget accessible parent. */
         }
         values {
            Elm_Interface_Atspi_Accessible *parent;
         }
      }
      state_set @protected {
         get {
            /*@ Gets set describing widget accessible states. */
         }
         values {
            Elm_Atspi_State_Set states;
         }
      }
      translation_domain @protected {
         get {
            /*Gets the translation domain of "name" and "description"
              properties.*/
         }
         set {
            /*Sets the translation domain of "name" and "description"
              properties.

              Translation domain should be set if application wants to support i18n
              for accessibily "name" and "description" properties.

              When translation domain is set values of "name" and "description"
              properties will be translated with dgettext function using
              current translation domain as "domainname" parameter.

              It is application developer responsibility to ensure that
              translation files are loaded and binded to translation domain
              when accessibility is enabled.*/
         }
         values {
            const(char) *domain; /* translation domain */
         }
      }
   }
   methods {
      event_handler_add @class @protected {
         /* Register accessibility event listener */
         params {
              @in Eo_Event_Cb cb; /*callback*/
              @in void *data; /*data*/
         }
         return: Elm_Atspi_Event_Handler*; /*Event handler*/
      }
      event_handler_del @class @protected {
         /*Deregister accessibility event listener*/
         params {
              @in Elm_Atspi_Event_Handler *handler; /*Event handler*/
         }
      }
      event_emit @class @protected {
         params {
            @in Elm_Interface_Atspi_Accessible *accessible; /*Accessibility object.*/
            @in const(Eo_Event_Description) *event; /*Accessibility event type.*/
            @in void *event_info; /*Accessibility event details.*/
         }
      }
      relationship_append @protected {
         /*Defines the relationship between two accessible objects.

           Adds unique relation between source object and relation_object of a
           given type.

           Relationships can be queried by Assistive Technology clients to
           provide customized feedback, improving overall user experience.

           Relationship_append API is asymmetric, which means that
           appending, for example, relation ELM_ATSPI_RELATION_FLOWS_TO from object A to B,
           do NOT append relation ELM_ATSPI_RELATION_FLOWS_FROM from object B to
           object A.

           return: EINA_TRUE is relationship was successfully appended, EINA_FALSE
           otherwise*/
         return: bool;
         params {
            @in Elm_Atspi_Relation_Type type;
            @in const(Elm_Interface_Atspi_Accessible) *relation_object;
         }
      }
      relationship_remove @protected {
         /*Removes the relationship between two accessible objects.

          If relation_object is NULL function removes all relations
          of given type.
         */
         params {
            @in Elm_Atspi_Relation_Type type;
            @in const(Elm_Interface_Atspi_Accessible) *relation_object;
         }
      }
      relationships_clear @protected {
         /*Removes all relationships in accessible object.*/
      }
   }
   events {
      property,changed: const(char)*;
      children,changed: Elm_Atspi_Event_Children_Changed_Data;
      state,changed: Elm_Atspi_Event_State_Changed_Data;
      visible,data,changed;
      active,descendant,changed;
      added;
      removed;
   }
}
