mixin Elm_Interface_Atspi_Component ()
{
   legacy_prefix: null;
   eo_prefix: elm_interface_atspi_component;
   data: null;
   properties {
      size @protected {
         set {
            /*@ Sets size of accessible widget. */
            return: bool;
         }
         get {
            /*@ Gets size of accessible widget. */
         }
         values {
            int w;
            int h;
         }
      }
      layer @protected {
         get {
            /*@ Sets evas layer of accessible widget. */
         }
         values {
            int layer;
         }
      }
      alpha @protected {
         get {
            /*@ Gets alpha of accessible widget. */
         }
         values {
            double alpha; /*@ alpha value in [0, 1] range. */
         }
      }
      z_order @protected {
         get {
            /*@ Gets the depth at which the component is shown in relation to
            other components in the same container. */
         }
         values {
            int z_order;
         }
      }
      extents @protected {
         get {
            /*@ Gets geometry of accessible widget. */
         }
         set {
            /*@ Sets geometry of accessible widget. */
            return: bool;
         }
         keys {
            bool screen_coords; /*@ If true x and y values will be relative
                                       to screen origin, otherwise relative to
                                       canvas */
         }
         values {
            int x;
            int y;
            int w;
            int h;
         }
      }
      position @protected {
         set {
            /*@ Sets position of accessible widget. */
            return: bool;
         }
         get {
            /*@ Gets position of accessible widget. */
         }
         keys {
            bool screen_coords; /*@ If true x and y values will be relative
                                       to screen origin, otherwise relative to
                                       canvas */
         }
         values {
            int x;
            int y;
         }
      }
   }
   methods {
      contains @protected {
         params {
            bool screen_coords; /*@ If true x and y values will be relative
                                       to screen origin, otherwise relative to
                                       canvas */
            @in int x;
            @in int y;
         }
         return: bool;
      }
      focus_grab @protected {
         /*@ Focuses accessible widget.

         @return true if focus grab focus has successed, false otherwise. */

         return: bool;
      }
      accessible_at_point_get @protected {
         /*@ Gets top component object occupying space at given coordinates. */
         params {
            bool screen_coords; /*@ If true x and y values will be relative
                                       to screen origin, otherwise relative to
                                       canvas */
            @in int x;
            @in int y;
         }
         return: Eo*;
      }
   }
}
